"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("./index");
var _dom = /*#__PURE__*/ _interop_require_default(require("./dom"));
var _necessary = require("necessary");
var _occamgrammars = require("occam-grammars");
var _query = require("./utilities/query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var readFile = _necessary.fileSystemUtilities.readFile, furtleLexerFromNothing = _occamgrammars.lexersUtilities.furtleLexerFromNothing, furtleParserFromNothing = _occamgrammars.parsersUtilities.furtleParserFromNothing;
var furtleLexer = furtleLexerFromNothing(), furtleParser = furtleParserFromNothing();
var errorNodesQuery = (0, _query.nodesQuery)("/document/error"), procedureDeclarationNodesQuery = (0, _query.nodesQuery)("/document/procedureDeclaration");
var Error = _dom.default.Error, ProcedureDeclaration = _dom.default.ProcedureDeclaration;
var filePath = "first-order-logic/Procedures/Free and bound variables.ftl", fileContent = readFile(filePath), content = fileContent, tokens = furtleLexer.tokenise(content), node = furtleParser.parse(tokens), fileContext = null;
var errorNodes = errorNodesQuery(node), errorNodesLength = errorNodes.length;
if (errorNodesLength > 0) {
    errorNodes.forEach(function(errorNode) {
        Error.fromErrorNode(errorNode, fileContext);
    });
}
var procedureDeclarationNodes = procedureDeclarationNodesQuery(node);
procedureDeclarationNodes.forEach(function(procedureDeclarationNode) {
    ProcedureDeclaration.fromProcedureDeclarationNode(procedureDeclarationNode, fileContext);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGFtcGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgXCIuL2luZGV4XCI7XG5cbmltcG9ydCBkb20gZnJvbSBcIi4vZG9tXCI7XG5cbmltcG9ydCB7IGZpbGVTeXN0ZW1VdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5pbXBvcnQgeyBsZXhlcnNVdGlsaXRpZXMsIHBhcnNlcnNVdGlsaXRpZXMgfSBmcm9tIFwib2NjYW0tZ3JhbW1hcnNcIjtcblxuaW1wb3J0IHsgbm9kZXNRdWVyeSB9IGZyb20gXCIuL3V0aWxpdGllcy9xdWVyeVwiO1xuXG5jb25zdCB7IHJlYWRGaWxlIH0gPSBmaWxlU3lzdGVtVXRpbGl0aWVzLFxuICAgICAgeyBmdXJ0bGVMZXhlckZyb21Ob3RoaW5nIH0gPSBsZXhlcnNVdGlsaXRpZXMsXG4gICAgICB7IGZ1cnRsZVBhcnNlckZyb21Ob3RoaW5nIH0gPSBwYXJzZXJzVXRpbGl0aWVzO1xuXG5jb25zdCBmdXJ0bGVMZXhlciA9IGZ1cnRsZUxleGVyRnJvbU5vdGhpbmcoKSxcbiAgICAgIGZ1cnRsZVBhcnNlciA9IGZ1cnRsZVBhcnNlckZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IGVycm9yTm9kZXNRdWVyeSA9IG5vZGVzUXVlcnkoXCIvZG9jdW1lbnQvZXJyb3JcIiksXG4gICAgICBwcm9jZWR1cmVEZWNsYXJhdGlvbk5vZGVzUXVlcnkgPSBub2Rlc1F1ZXJ5KFwiL2RvY3VtZW50L3Byb2NlZHVyZURlY2xhcmF0aW9uXCIpO1xuXG5jb25zdCB7IEVycm9yLCBQcm9jZWR1cmVEZWNsYXJhdGlvbiB9ID0gZG9tO1xuXG5jb25zdCBmaWxlUGF0aCA9IFwiZmlyc3Qtb3JkZXItbG9naWMvUHJvY2VkdXJlcy9GcmVlIGFuZCBib3VuZCB2YXJpYWJsZXMuZnRsXCIsXG4gICAgICBmaWxlQ29udGVudCA9IHJlYWRGaWxlKGZpbGVQYXRoKSxcbiAgICAgIGNvbnRlbnQgPSBmaWxlQ29udGVudCwgIC8vL1xuICAgICAgdG9rZW5zID0gZnVydGxlTGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICBub2RlID0gZnVydGxlUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICBmaWxlQ29udGV4dCA9IG51bGw7XG5cbmNvbnN0IGVycm9yTm9kZXMgPSBlcnJvck5vZGVzUXVlcnkobm9kZSksXG4gICAgICBlcnJvck5vZGVzTGVuZ3RoID0gZXJyb3JOb2Rlcy5sZW5ndGg7XG5cbmlmIChlcnJvck5vZGVzTGVuZ3RoID4gMCkge1xuICBlcnJvck5vZGVzLmZvckVhY2goKGVycm9yTm9kZSkgPT4ge1xuICAgIEVycm9yLmZyb21FcnJvck5vZGUoZXJyb3JOb2RlLCBmaWxlQ29udGV4dCk7XG4gIH0pO1xufVxuXG5jb25zdCBwcm9jZWR1cmVEZWNsYXJhdGlvbk5vZGVzID0gcHJvY2VkdXJlRGVjbGFyYXRpb25Ob2Rlc1F1ZXJ5KG5vZGUpO1xuXG5wcm9jZWR1cmVEZWNsYXJhdGlvbk5vZGVzLmZvckVhY2goKHByb2NlZHVyZURlY2xhcmF0aW9uTm9kZSkgPT4ge1xuICBQcm9jZWR1cmVEZWNsYXJhdGlvbi5mcm9tUHJvY2VkdXJlRGVjbGFyYXRpb25Ob2RlKHByb2NlZHVyZURlY2xhcmF0aW9uTm9kZSwgZmlsZUNvbnRleHQpO1xufSk7XG4iXSwibmFtZXMiOlsicmVhZEZpbGUiLCJmaWxlU3lzdGVtVXRpbGl0aWVzIiwiZnVydGxlTGV4ZXJGcm9tTm90aGluZyIsImxleGVyc1V0aWxpdGllcyIsImZ1cnRsZVBhcnNlckZyb21Ob3RoaW5nIiwicGFyc2Vyc1V0aWxpdGllcyIsImZ1cnRsZUxleGVyIiwiZnVydGxlUGFyc2VyIiwiZXJyb3JOb2Rlc1F1ZXJ5Iiwibm9kZXNRdWVyeSIsInByb2NlZHVyZURlY2xhcmF0aW9uTm9kZXNRdWVyeSIsIkVycm9yIiwiZG9tIiwiUHJvY2VkdXJlRGVjbGFyYXRpb24iLCJmaWxlUGF0aCIsImZpbGVDb250ZW50IiwiY29udGVudCIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwiZmlsZUNvbnRleHQiLCJlcnJvck5vZGVzIiwiZXJyb3JOb2Rlc0xlbmd0aCIsImxlbmd0aCIsImZvckVhY2giLCJlcnJvck5vZGUiLCJmcm9tRXJyb3JOb2RlIiwicHJvY2VkdXJlRGVjbGFyYXRpb25Ob2RlcyIsInByb2NlZHVyZURlY2xhcmF0aW9uTm9kZSIsImZyb21Qcm9jZWR1cmVEZWNsYXJhdGlvbk5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7O1FBRU87MERBRVM7eUJBRW9COzZCQUNjO3FCQUV2Qjs7Ozs7O0FBRTNCLElBQU0sQUFBRUEsV0FBYUMsOEJBQW1CLENBQWhDRCxVQUNGLEFBQUVFLHlCQUEyQkMsOEJBQWUsQ0FBMUNELHdCQUNGLEFBQUVFLDBCQUE0QkMsK0JBQWdCLENBQTVDRDtBQUVSLElBQU1FLGNBQWNKLDBCQUNkSyxlQUFlSDtBQUVyQixJQUFNSSxrQkFBa0JDLElBQUFBLGlCQUFVLEVBQUMsb0JBQzdCQyxpQ0FBaUNELElBQUFBLGlCQUFVLEVBQUM7QUFFbEQsSUFBUUUsUUFBZ0NDLFlBQUcsQ0FBbkNELE9BQU9FLHVCQUF5QkQsWUFBRyxDQUE1QkM7QUFFZixJQUFNQyxXQUFXLDZEQUNYQyxjQUFjZixTQUFTYyxXQUN2QkUsVUFBVUQsYUFDVkUsU0FBU1gsWUFBWVksUUFBUSxDQUFDRixVQUM5QkcsT0FBT1osYUFBYWEsS0FBSyxDQUFDSCxTQUMxQkksY0FBYztBQUVwQixJQUFNQyxhQUFhZCxnQkFBZ0JXLE9BQzdCSSxtQkFBbUJELFdBQVdFLE1BQU07QUFFMUMsSUFBSUQsbUJBQW1CLEdBQUc7SUFDeEJELFdBQVdHLE9BQU8sQ0FBQyxTQUFDQztRQUNsQmYsTUFBTWdCLGFBQWEsQ0FBQ0QsV0FBV0w7SUFDakM7QUFDRjtBQUVBLElBQU1PLDRCQUE0QmxCLCtCQUErQlM7QUFFakVTLDBCQUEwQkgsT0FBTyxDQUFDLFNBQUNJO0lBQ2pDaEIscUJBQXFCaUIsNEJBQTRCLENBQUNELDBCQUEwQlI7QUFDOUUifQ==