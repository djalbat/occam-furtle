"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "valuesFromNothing", {
    enumerable: true,
    get: function() {
        return valuesFromNothing;
    }
});
var _occamquery = require("occam-query");
var _index = require("../../index");
var _necessary = require("necessary");
var _file = /*#__PURE__*/ _interop_require_default(require("../context/file"));
var _nominal = require("../utilities/nominal");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first;
var termNodeQuery = _occamquery.Query.fromExpressionString("/statement/argument/term");
var nominalLexer = (0, _nominal.nominalLexerFromNothing)(), nominalParser = (0, _nominal.nominalParserFromNothing)();
function valuesFromNothing() {
    var fileContext = fileContextFromNothing(), context = fileContext, nodes = nodesFromFileContext(fileContext), values = _index.Values.fromNodes(nodes, context);
    return values;
}
function nodesFromFileContext(fileContext) {
    var node = fileContext.getNode(), termNodes = termNodeQuery.execute(node), firstTermNode = first(termNodes), termNode = firstTermNode, statementNode = node, nodes = [
        termNode,
        statementNode
    ];
    return nodes;
}
function fileContextFromNothing() {
    var content = "âˆ€n n = n", tokens = nominalLexer.tokenise(content), node = nominalParser.parse(tokens), fileContext = _file.default.fromNodeAndTokens(node, tokens);
    return fileContext;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9leGFtcGxlL3V0aWxpdGllcy92YWx1ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIm9jY2FtLXF1ZXJ5XCI7XG5pbXBvcnQgeyBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjsgLy8vXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IEZpbGVDb250ZXh0IGZyb20gXCIuLi9jb250ZXh0L2ZpbGVcIjtcblxuaW1wb3J0IHsgbm9taW5hbExleGVyRnJvbU5vdGhpbmcsIG5vbWluYWxQYXJzZXJGcm9tTm90aGluZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvbm9taW5hbFwiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuY29uc3QgdGVybU5vZGVRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiL3N0YXRlbWVudC9hcmd1bWVudC90ZXJtXCIpO1xuXG5jb25zdCBub21pbmFsTGV4ZXIgPSBub21pbmFsTGV4ZXJGcm9tTm90aGluZygpLFxuICAgICAgbm9taW5hbFBhcnNlciA9IG5vbWluYWxQYXJzZXJGcm9tTm90aGluZygpO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVzRnJvbU5vdGhpbmcoKSB7XG4gIGNvbnN0IGZpbGVDb250ZXh0ID0gZmlsZUNvbnRleHRGcm9tTm90aGluZygpLFxuICAgICAgICBjb250ZXh0ID0gZmlsZUNvbnRleHQsICAvLy9cbiAgICAgICAgbm9kZXMgPSBub2Rlc0Zyb21GaWxlQ29udGV4dChmaWxlQ29udGV4dCksXG4gICAgICAgIHZhbHVlcyA9IFZhbHVlcy5mcm9tTm9kZXMobm9kZXMsIGNvbnRleHQpO1xuXG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIG5vZGVzRnJvbUZpbGVDb250ZXh0KGZpbGVDb250ZXh0KSB7XG4gIGNvbnN0IG5vZGUgPSBmaWxlQ29udGV4dC5nZXROb2RlKCksXG4gICAgICAgIHRlcm1Ob2RlcyA9IHRlcm1Ob2RlUXVlcnkuZXhlY3V0ZShub2RlKSxcbiAgICAgICAgZmlyc3RUZXJtTm9kZSA9IGZpcnN0KHRlcm1Ob2RlcyksXG4gICAgICAgIHRlcm1Ob2RlID0gZmlyc3RUZXJtTm9kZSwgLy8vXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgbm9kZXMgPSBbXG4gICAgICAgICAgdGVybU5vZGUsXG4gICAgICAgICAgc3RhdGVtZW50Tm9kZVxuICAgICAgICBdO1xuXG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gZmlsZUNvbnRleHRGcm9tTm90aGluZygpIHtcbiAgY29uc3QgY29udGVudCA9IGDiiIBuIG4gPSBuYCxcbiAgICAgICAgdG9rZW5zID0gbm9taW5hbExleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gbm9taW5hbFBhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBmaWxlQ29udGV4dCA9IEZpbGVDb250ZXh0LmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgcmV0dXJuIGZpbGVDb250ZXh0O1xufVxuIl0sIm5hbWVzIjpbInZhbHVlc0Zyb21Ob3RoaW5nIiwiZmlyc3QiLCJhcnJheVV0aWxpdGllcyIsInRlcm1Ob2RlUXVlcnkiLCJRdWVyeSIsImZyb21FeHByZXNzaW9uU3RyaW5nIiwibm9taW5hbExleGVyIiwibm9taW5hbExleGVyRnJvbU5vdGhpbmciLCJub21pbmFsUGFyc2VyIiwibm9taW5hbFBhcnNlckZyb21Ob3RoaW5nIiwiZmlsZUNvbnRleHQiLCJmaWxlQ29udGV4dEZyb21Ob3RoaW5nIiwiY29udGV4dCIsIm5vZGVzIiwibm9kZXNGcm9tRmlsZUNvbnRleHQiLCJ2YWx1ZXMiLCJWYWx1ZXMiLCJmcm9tTm9kZXMiLCJub2RlIiwiZ2V0Tm9kZSIsInRlcm1Ob2RlcyIsImV4ZWN1dGUiLCJmaXJzdFRlcm1Ob2RlIiwidGVybU5vZGUiLCJzdGF0ZW1lbnROb2RlIiwiY29udGVudCIsInRva2VucyIsInRva2VuaXNlIiwicGFyc2UiLCJGaWxlQ29udGV4dCIsImZyb21Ob2RlQW5kVG9rZW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFpQmdCQTs7O2VBQUFBOzs7MEJBZk07cUJBQ0M7eUJBQ1E7MkRBRVA7dUJBRTBDOzs7Ozs7QUFFbEUsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQ7QUFFUixJQUFNRSxnQkFBZ0JDLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDO0FBRWpELElBQU1DLGVBQWVDLElBQUFBLGdDQUF1QixLQUN0Q0MsZ0JBQWdCQyxJQUFBQSxpQ0FBd0I7QUFFdkMsU0FBU1Q7SUFDZCxJQUFNVSxjQUFjQywwQkFDZEMsVUFBVUYsYUFDVkcsUUFBUUMscUJBQXFCSixjQUM3QkssU0FBU0MsYUFBTSxDQUFDQyxTQUFTLENBQUNKLE9BQU9EO0lBRXZDLE9BQU9HO0FBQ1Q7QUFFQSxTQUFTRCxxQkFBcUJKLFdBQVc7SUFDdkMsSUFBTVEsT0FBT1IsWUFBWVMsT0FBTyxJQUMxQkMsWUFBWWpCLGNBQWNrQixPQUFPLENBQUNILE9BQ2xDSSxnQkFBZ0JyQixNQUFNbUIsWUFDdEJHLFdBQVdELGVBQ1hFLGdCQUFnQk4sTUFDaEJMLFFBQVE7UUFDTlU7UUFDQUM7S0FDRDtJQUVQLE9BQU9YO0FBQ1Q7QUFFQSxTQUFTRjtJQUNQLElBQU1jLFVBQVcsWUFDWEMsU0FBU3BCLGFBQWFxQixRQUFRLENBQUNGLFVBQy9CUCxPQUFPVixjQUFjb0IsS0FBSyxDQUFDRixTQUMzQmhCLGNBQWNtQixhQUFXLENBQUNDLGlCQUFpQixDQUFDWixNQUFNUTtJQUV4RCxPQUFPaEI7QUFDVCJ9