"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "valuesFromNothing", {
    enumerable: true,
    get: function() {
        return valuesFromNothing;
    }
});
var _index = require("../../index");
var _occamquery = require("occam-query");
var _necessary = require("necessary");
var _file = /*#__PURE__*/ _interop_require_default(require("../context/file"));
var _nominal = require("../utilities/nominal");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first;
var termNodeQuery = _occamquery.Query.fromExpressionString("/statement/argument/term");
var nominalLexer = (0, _nominal.nominalLexerFromNothing)(), nominalParser = (0, _nominal.nominalParserFromNothing)();
function valuesFromNothing() {
    var fileContext = fileContextFromNothing(), nodes = nodesFromFileContext(fileContext), values = nodes.map(function(node) {
        var value = _index.Value.fromNode(node, fileContext);
        return value;
    });
    return values;
}
function nodesFromFileContext(fileContext) {
    var node = fileContext.getNode(), termNodes = termNodeQuery.execute(node), firstTermNode = first(termNodes), termNode = firstTermNode, statementNode = node, nodes = [
        termNode,
        statementNode
    ];
    return nodes;
}
function fileContextFromNothing() {
    var content = "âˆ€n n = n", tokens = nominalLexer.tokenise(content), node = nominalParser.parse(tokens), fileContext = _file.default.fromNodeAndTokens(node, tokens);
    return fileContext;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9leGFtcGxlL3V0aWxpdGllcy92YWx1ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7IC8vL1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwib2NjYW0tcXVlcnlcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgRmlsZUNvbnRleHQgZnJvbSBcIi4uL2NvbnRleHQvZmlsZVwiO1xuXG5pbXBvcnQgeyBub21pbmFsTGV4ZXJGcm9tTm90aGluZywgbm9taW5hbFBhcnNlckZyb21Ob3RoaW5nIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ub21pbmFsXCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCB0ZXJtTm9kZVF1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvc3RhdGVtZW50L2FyZ3VtZW50L3Rlcm1cIik7XG5cbmNvbnN0IG5vbWluYWxMZXhlciA9IG5vbWluYWxMZXhlckZyb21Ob3RoaW5nKCksXG4gICAgICBub21pbmFsUGFyc2VyID0gbm9taW5hbFBhcnNlckZyb21Ob3RoaW5nKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZXNGcm9tTm90aGluZygpIHtcbiAgY29uc3QgZmlsZUNvbnRleHQgPSBmaWxlQ29udGV4dEZyb21Ob3RoaW5nKCksXG4gICAgICAgIG5vZGVzID0gbm9kZXNGcm9tRmlsZUNvbnRleHQoZmlsZUNvbnRleHQpLFxuICAgICAgICB2YWx1ZXMgPSBub2Rlcy5tYXAoKG5vZGUpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IFZhbHVlLmZyb21Ob2RlKG5vZGUsIGZpbGVDb250ZXh0KTtcblxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gbm9kZXNGcm9tRmlsZUNvbnRleHQoZmlsZUNvbnRleHQpIHtcbiAgY29uc3Qgbm9kZSA9IGZpbGVDb250ZXh0LmdldE5vZGUoKSxcbiAgICAgICAgdGVybU5vZGVzID0gdGVybU5vZGVRdWVyeS5leGVjdXRlKG5vZGUpLFxuICAgICAgICBmaXJzdFRlcm1Ob2RlID0gZmlyc3QodGVybU5vZGVzKSxcbiAgICAgICAgdGVybU5vZGUgPSBmaXJzdFRlcm1Ob2RlLCAvLy9cbiAgICAgICAgc3RhdGVtZW50Tm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICBub2RlcyA9IFtcbiAgICAgICAgICB0ZXJtTm9kZSxcbiAgICAgICAgICBzdGF0ZW1lbnROb2RlXG4gICAgICAgIF07XG5cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBmaWxlQ29udGV4dEZyb21Ob3RoaW5nKCkge1xuICBjb25zdCBjb250ZW50ID0gYOKIgG4gbiA9IG5gLFxuICAgICAgICB0b2tlbnMgPSBub21pbmFsTGV4ZXIudG9rZW5pc2UoY29udGVudCksXG4gICAgICAgIG5vZGUgPSBub21pbmFsUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIGZpbGVDb250ZXh0ID0gRmlsZUNvbnRleHQuZnJvbU5vZGVBbmRUb2tlbnMobm9kZSwgdG9rZW5zKTtcblxuICByZXR1cm4gZmlsZUNvbnRleHQ7XG59XG4iXSwibmFtZXMiOlsidmFsdWVzRnJvbU5vdGhpbmciLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwidGVybU5vZGVRdWVyeSIsIlF1ZXJ5IiwiZnJvbUV4cHJlc3Npb25TdHJpbmciLCJub21pbmFsTGV4ZXIiLCJub21pbmFsTGV4ZXJGcm9tTm90aGluZyIsIm5vbWluYWxQYXJzZXIiLCJub21pbmFsUGFyc2VyRnJvbU5vdGhpbmciLCJmaWxlQ29udGV4dCIsImZpbGVDb250ZXh0RnJvbU5vdGhpbmciLCJub2RlcyIsIm5vZGVzRnJvbUZpbGVDb250ZXh0IiwidmFsdWVzIiwibWFwIiwibm9kZSIsInZhbHVlIiwiVmFsdWUiLCJmcm9tTm9kZSIsImdldE5vZGUiLCJ0ZXJtTm9kZXMiLCJleGVjdXRlIiwiZmlyc3RUZXJtTm9kZSIsInRlcm1Ob2RlIiwic3RhdGVtZW50Tm9kZSIsImNvbnRlbnQiLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsInBhcnNlIiwiRmlsZUNvbnRleHQiLCJmcm9tTm9kZUFuZFRva2VucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBaUJnQkE7OztlQUFBQTs7O3FCQWZNOzBCQUNBO3lCQUNTOzJEQUVQO3VCQUUwQzs7Ozs7O0FBRWxFLElBQU0sQUFBRUMsUUFBVUMseUJBQWMsQ0FBeEJEO0FBRVIsSUFBTUUsZ0JBQWdCQyxpQkFBSyxDQUFDQyxvQkFBb0IsQ0FBQztBQUVqRCxJQUFNQyxlQUFlQyxJQUFBQSxnQ0FBdUIsS0FDdENDLGdCQUFnQkMsSUFBQUEsaUNBQXdCO0FBRXZDLFNBQVNUO0lBQ2QsSUFBTVUsY0FBY0MsMEJBQ2RDLFFBQVFDLHFCQUFxQkgsY0FDN0JJLFNBQVNGLE1BQU1HLEdBQUcsQ0FBQyxTQUFDQztRQUNsQixJQUFNQyxRQUFRQyxZQUFLLENBQUNDLFFBQVEsQ0FBQ0gsTUFBTU47UUFFbkMsT0FBT087SUFDVDtJQUVOLE9BQU9IO0FBQ1Q7QUFFQSxTQUFTRCxxQkFBcUJILFdBQVc7SUFDdkMsSUFBTU0sT0FBT04sWUFBWVUsT0FBTyxJQUMxQkMsWUFBWWxCLGNBQWNtQixPQUFPLENBQUNOLE9BQ2xDTyxnQkFBZ0J0QixNQUFNb0IsWUFDdEJHLFdBQVdELGVBQ1hFLGdCQUFnQlQsTUFDaEJKLFFBQVE7UUFDTlk7UUFDQUM7S0FDRDtJQUVQLE9BQU9iO0FBQ1Q7QUFFQSxTQUFTRDtJQUNQLElBQU1lLFVBQVcsWUFDWEMsU0FBU3JCLGFBQWFzQixRQUFRLENBQUNGLFVBQy9CVixPQUFPUixjQUFjcUIsS0FBSyxDQUFDRixTQUMzQmpCLGNBQWNvQixhQUFXLENBQUNDLGlCQUFpQixDQUFDZixNQUFNVztJQUV4RCxPQUFPakI7QUFDVCJ9