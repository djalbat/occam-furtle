"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "valuesFromFileContext", {
    enumerable: true,
    get: function() {
        return valuesFromFileContext;
    }
});
var _occamquery = require("occam-query");
var _index = require("../../index");
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first;
var termNodeQuery = _occamquery.Query.fromExpressionString("//term[1]");
function valuesFromFileContext(fileContext) {
    var context = fileContext, nodes = nodesFromFileContext(fileContext), values = _index.Values.fromNodes(nodes, context);
    return values;
}
function nodesFromFileContext(fileContext) {
    var node = fileContext.getNode(), termNodes = termNodeQuery.execute(node), firstTermNode = first(termNodes), termNode = firstTermNode, statementNode = node, nodes = [
        termNode,
        statementNode
    ];
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9leGFtcGxlL3V0aWxpdGllcy92YWx1ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIm9jY2FtLXF1ZXJ5XCI7XG5pbXBvcnQgeyBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjsgLy8vXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBmaXJzdCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmNvbnN0IHRlcm1Ob2RlUXVlcnkgPSBRdWVyeS5mcm9tRXhwcmVzc2lvblN0cmluZyhcIi8vdGVybVsxXVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlc0Zyb21GaWxlQ29udGV4dChmaWxlQ29udGV4dCkge1xuICBjb25zdCBjb250ZXh0ID0gZmlsZUNvbnRleHQsICAvLy9cbiAgICAgICAgbm9kZXMgPSBub2Rlc0Zyb21GaWxlQ29udGV4dChmaWxlQ29udGV4dCksXG4gICAgICAgIHZhbHVlcyA9IFZhbHVlcy5mcm9tTm9kZXMobm9kZXMsIGNvbnRleHQpO1xuXG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIG5vZGVzRnJvbUZpbGVDb250ZXh0KGZpbGVDb250ZXh0KSB7XG4gIGNvbnN0IG5vZGUgPSBmaWxlQ29udGV4dC5nZXROb2RlKCksXG4gICAgICAgIHRlcm1Ob2RlcyA9IHRlcm1Ob2RlUXVlcnkuZXhlY3V0ZShub2RlKSxcbiAgICAgICAgZmlyc3RUZXJtTm9kZSA9IGZpcnN0KHRlcm1Ob2RlcyksXG4gICAgICAgIHRlcm1Ob2RlID0gZmlyc3RUZXJtTm9kZSwgLy8vXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgbm9kZXMgPSBbXG4gICAgICAgICAgdGVybU5vZGUsXG4gICAgICAgICAgc3RhdGVtZW50Tm9kZVxuICAgICAgICBdO1xuXG4gIHJldHVybiBub2Rlcztcbn1cbiJdLCJuYW1lcyI6WyJ2YWx1ZXNGcm9tRmlsZUNvbnRleHQiLCJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwidGVybU5vZGVRdWVyeSIsIlF1ZXJ5IiwiZnJvbUV4cHJlc3Npb25TdHJpbmciLCJmaWxlQ29udGV4dCIsImNvbnRleHQiLCJub2RlcyIsIm5vZGVzRnJvbUZpbGVDb250ZXh0IiwidmFsdWVzIiwiVmFsdWVzIiwiZnJvbU5vZGVzIiwibm9kZSIsImdldE5vZGUiLCJ0ZXJtTm9kZXMiLCJleGVjdXRlIiwiZmlyc3RUZXJtTm9kZSIsInRlcm1Ob2RlIiwic3RhdGVtZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBVWdCQTs7O2VBQUFBOzs7MEJBUk07cUJBQ0M7eUJBQ1E7QUFFL0IsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQ7QUFFUixJQUFNRSxnQkFBZ0JDLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDO0FBRTFDLFNBQVNMLHNCQUFzQk0sV0FBVztJQUMvQyxJQUFNQyxVQUFVRCxhQUNWRSxRQUFRQyxxQkFBcUJILGNBQzdCSSxTQUFTQyxhQUFNLENBQUNDLFNBQVMsQ0FBQ0osT0FBT0Q7SUFFdkMsT0FBT0c7QUFDVDtBQUVBLFNBQVNELHFCQUFxQkgsV0FBVztJQUN2QyxJQUFNTyxPQUFPUCxZQUFZUSxPQUFPLElBQzFCQyxZQUFZWixjQUFjYSxPQUFPLENBQUNILE9BQ2xDSSxnQkFBZ0JoQixNQUFNYyxZQUN0QkcsV0FBV0QsZUFDWEUsZ0JBQWdCTixNQUNoQkwsUUFBUTtRQUNOVTtRQUNBQztLQUNEO0lBRVAsT0FBT1g7QUFDVCJ9