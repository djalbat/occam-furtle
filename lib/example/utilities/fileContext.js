"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "fileContextFromNothing", {
    enumerable: true,
    get: function() {
        return fileContextFromNothing;
    }
});
var _occamentities = require("occam-entities");
var _index = require("../../index");
var _necessary = require("necessary");
var _release = require("../context/release");
var readFile = _necessary.fileSystemUtilities.readFile;
function fileContextFromNothing() {
    var file = fileFromNothing(), releaseContext = _release.ReleaseContext.fromFile(file), fileContext = _index.FileContext.fromFile(file, releaseContext);
    fileContext.verify();
    return fileContext;
}
function fileFromNothing() {
    var filePath = "example/Free and bound variables.ftl", fileContent = readFile(filePath), path = filePath, content = fileContent, released = false, file = _occamentities.File.fromPathContentAndReleased(path, content, released);
    return file;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9leGFtcGxlL3V0aWxpdGllcy9maWxlQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRmlsZSB9IGZyb20gXCJvY2NhbS1lbnRpdGllc1wiO1xuaW1wb3J0IHsgRmlsZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjsgIC8vL1xuaW1wb3J0IHsgZmlsZVN5c3RlbVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgUmVsZWFzZUNvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dC9yZWxlYXNlXCI7XG5cbmNvbnN0IHsgcmVhZEZpbGUgfSA9IGZpbGVTeXN0ZW1VdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxlQ29udGV4dEZyb21Ob3RoaW5nKCkge1xuICBjb25zdCBmaWxlID0gZmlsZUZyb21Ob3RoaW5nKCksXG4gICAgICAgIHJlbGVhc2VDb250ZXh0ID0gUmVsZWFzZUNvbnRleHQuZnJvbUZpbGUoZmlsZSksXG4gICAgICAgIGZpbGVDb250ZXh0ID0gRmlsZUNvbnRleHQuZnJvbUZpbGUoZmlsZSwgcmVsZWFzZUNvbnRleHQpO1xuXG4gIGZpbGVDb250ZXh0LnZlcmlmeSgpO1xuXG4gIHJldHVybiBmaWxlQ29udGV4dDtcbn1cblxuZnVuY3Rpb24gZmlsZUZyb21Ob3RoaW5nKCkge1xuICBjb25zdCBmaWxlUGF0aCA9IFwiZXhhbXBsZS9GcmVlIGFuZCBib3VuZCB2YXJpYWJsZXMuZnRsXCIsXG4gICAgICAgIGZpbGVDb250ZW50ID0gcmVhZEZpbGUoZmlsZVBhdGgpLFxuICAgICAgICBwYXRoID0gZmlsZVBhdGgsICAvLy9cbiAgICAgICAgY29udGVudCA9IGZpbGVDb250ZW50LCAgLy8vXG4gICAgICAgIHJlbGVhc2VkID0gZmFsc2UsXG4gICAgICAgIGZpbGUgPSBGaWxlLmZyb21QYXRoQ29udGVudEFuZFJlbGVhc2VkKHBhdGgsIGNvbnRlbnQsIHJlbGVhc2VkKTtcblxuICByZXR1cm4gZmlsZTtcbn0iXSwibmFtZXMiOlsiZmlsZUNvbnRleHRGcm9tTm90aGluZyIsInJlYWRGaWxlIiwiZmlsZVN5c3RlbVV0aWxpdGllcyIsImZpbGUiLCJmaWxlRnJvbU5vdGhpbmciLCJyZWxlYXNlQ29udGV4dCIsIlJlbGVhc2VDb250ZXh0IiwiZnJvbUZpbGUiLCJmaWxlQ29udGV4dCIsIkZpbGVDb250ZXh0IiwidmVyaWZ5IiwiZmlsZVBhdGgiLCJmaWxlQ29udGVudCIsInBhdGgiLCJjb250ZW50IiwicmVsZWFzZWQiLCJGaWxlIiwiZnJvbVBhdGhDb250ZW50QW5kUmVsZWFzZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQVVnQkE7OztlQUFBQTs7OzZCQVJLO3FCQUNPO3lCQUNRO3VCQUVMO0FBRS9CLElBQU0sQUFBRUMsV0FBYUMsOEJBQW1CLENBQWhDRDtBQUVELFNBQVNEO0lBQ2QsSUFBTUcsT0FBT0MsbUJBQ1BDLGlCQUFpQkMsdUJBQWMsQ0FBQ0MsUUFBUSxDQUFDSixPQUN6Q0ssY0FBY0Msa0JBQVcsQ0FBQ0YsUUFBUSxDQUFDSixNQUFNRTtJQUUvQ0csWUFBWUUsTUFBTTtJQUVsQixPQUFPRjtBQUNUO0FBRUEsU0FBU0o7SUFDUCxJQUFNTyxXQUFXLHdDQUNYQyxjQUFjWCxTQUFTVSxXQUN2QkUsT0FBT0YsVUFDUEcsVUFBVUYsYUFDVkcsV0FBVyxPQUNYWixPQUFPYSxtQkFBSSxDQUFDQywwQkFBMEIsQ0FBQ0osTUFBTUMsU0FBU0M7SUFFNUQsT0FBT1o7QUFDVCJ9