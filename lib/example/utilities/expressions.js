"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "expressionsFromFileContext", {
    enumerable: true,
    get: function() {
        return expressionsFromFileContext;
    }
});
var _occamquery = require("occam-query");
var _index = require("../../index");
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first;
var freeTermNodeQuery = _occamquery.Query.fromExpressionString("//term[1]"), boundTermNodeQuery = _occamquery.Query.fromExpressionString("//term[0]");
function expressionsFromFileContext(fileContext) {
    var free = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var context = fileContext, nodes = nodesFromFileContext(fileContext, free), expressions = _index.Expressions.fromNodes(nodes, context);
    return expressions;
}
function nodesFromFileContext(fileContext, free) {
    var termNodeQuery = free ? freeTermNodeQuery : boundTermNodeQuery, node = fileContext.getNode(), termNodes = termNodeQuery.execute(node), firstTermNode = first(termNodes), termNode = firstTermNode, statementNode = node, nodes = [
        termNode,
        statementNode
    ];
    return nodes;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9leGFtcGxlL3V0aWxpdGllcy9leHByZXNzaW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwib2NjYW0tcXVlcnlcIjtcbmltcG9ydCB7IEV4cHJlc3Npb25zIH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7IC8vL1xuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCBmcmVlVGVybU5vZGVRdWVyeSA9IFF1ZXJ5LmZyb21FeHByZXNzaW9uU3RyaW5nKFwiLy90ZXJtWzFdXCIpLFxuICAgICAgYm91bmRUZXJtTm9kZVF1ZXJ5ID0gUXVlcnkuZnJvbUV4cHJlc3Npb25TdHJpbmcoXCIvL3Rlcm1bMF1cIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBleHByZXNzaW9uc0Zyb21GaWxlQ29udGV4dChmaWxlQ29udGV4dCwgZnJlZSA9IHRydWUpIHtcbiAgY29uc3QgY29udGV4dCA9IGZpbGVDb250ZXh0LCAgLy8vXG4gICAgICAgIG5vZGVzID0gbm9kZXNGcm9tRmlsZUNvbnRleHQoZmlsZUNvbnRleHQsIGZyZWUpLFxuICAgICAgICBleHByZXNzaW9ucyA9IEV4cHJlc3Npb25zLmZyb21Ob2Rlcyhub2RlcywgY29udGV4dCk7XG5cbiAgcmV0dXJuIGV4cHJlc3Npb25zO1xufVxuXG5mdW5jdGlvbiBub2Rlc0Zyb21GaWxlQ29udGV4dChmaWxlQ29udGV4dCwgZnJlZSkge1xuICBjb25zdCB0ZXJtTm9kZVF1ZXJ5ID0gZnJlZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVUZXJtTm9kZVF1ZXJ5IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VuZFRlcm1Ob2RlUXVlcnksXG4gICAgICAgIG5vZGUgPSBmaWxlQ29udGV4dC5nZXROb2RlKCksXG4gICAgICAgIHRlcm1Ob2RlcyA9IHRlcm1Ob2RlUXVlcnkuZXhlY3V0ZShub2RlKSxcbiAgICAgICAgZmlyc3RUZXJtTm9kZSA9IGZpcnN0KHRlcm1Ob2RlcyksXG4gICAgICAgIHRlcm1Ob2RlID0gZmlyc3RUZXJtTm9kZSwgLy8vXG4gICAgICAgIHN0YXRlbWVudE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgbm9kZXMgPSBbXG4gICAgICAgICAgdGVybU5vZGUsXG4gICAgICAgICAgc3RhdGVtZW50Tm9kZVxuICAgICAgICBdO1xuXG4gIHJldHVybiBub2Rlcztcbn1cbiJdLCJuYW1lcyI6WyJleHByZXNzaW9uc0Zyb21GaWxlQ29udGV4dCIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJmcmVlVGVybU5vZGVRdWVyeSIsIlF1ZXJ5IiwiZnJvbUV4cHJlc3Npb25TdHJpbmciLCJib3VuZFRlcm1Ob2RlUXVlcnkiLCJmaWxlQ29udGV4dCIsImZyZWUiLCJjb250ZXh0Iiwibm9kZXMiLCJub2Rlc0Zyb21GaWxlQ29udGV4dCIsImV4cHJlc3Npb25zIiwiRXhwcmVzc2lvbnMiLCJmcm9tTm9kZXMiLCJ0ZXJtTm9kZVF1ZXJ5Iiwibm9kZSIsImdldE5vZGUiLCJ0ZXJtTm9kZXMiLCJleGVjdXRlIiwiZmlyc3RUZXJtTm9kZSIsInRlcm1Ob2RlIiwic3RhdGVtZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBV2dCQTs7O2VBQUFBOzs7MEJBVE07cUJBQ007eUJBQ0c7QUFFL0IsSUFBTSxBQUFFQyxRQUFVQyx5QkFBYyxDQUF4QkQ7QUFFUixJQUFNRSxvQkFBb0JDLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDLGNBQy9DQyxxQkFBcUJGLGlCQUFLLENBQUNDLG9CQUFvQixDQUFDO0FBRS9DLFNBQVNMLDJCQUEyQk8sV0FBVztRQUFFQyxPQUFBQSxpRUFBTztJQUM3RCxJQUFNQyxVQUFVRixhQUNWRyxRQUFRQyxxQkFBcUJKLGFBQWFDLE9BQzFDSSxjQUFjQyxrQkFBVyxDQUFDQyxTQUFTLENBQUNKLE9BQU9EO0lBRWpELE9BQU9HO0FBQ1Q7QUFFQSxTQUFTRCxxQkFBcUJKLFdBQVcsRUFBRUMsSUFBSTtJQUM3QyxJQUFNTyxnQkFBZ0JQLE9BQ0VMLG9CQUNFRyxvQkFDcEJVLE9BQU9ULFlBQVlVLE9BQU8sSUFDMUJDLFlBQVlILGNBQWNJLE9BQU8sQ0FBQ0gsT0FDbENJLGdCQUFnQm5CLE1BQU1pQixZQUN0QkcsV0FBV0QsZUFDWEUsZ0JBQWdCTixNQUNoQk4sUUFBUTtRQUNOVztRQUNBQztLQUNEO0lBRVAsT0FBT1o7QUFDVCJ9